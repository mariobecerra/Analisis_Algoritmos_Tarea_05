}
A1 = matrix(c(2, 3, 4, 1, 2, 9), ncol = 2, byrow = T)
c1 = c(21, 31)
b1 = c(25, 32, 54)
simplex(c1, A1, b1)
library(dplyr)
# Mario Becerra Contreras
# 2016-08-31
simplex <- function(c, A, b) {
# Salida: Lista con las siguientes entradas
#   sol: valor  optimo del problema,
#   fx: valor de la funcion objetivo en x,
#   flag: indica los siguientes casos:
#     flag == 0 funcion objetivo no acotada superiormente,
#     flag == 1 se encontró solucion óptima,
#     flag == 2 conjunto factible vacío.
# Para probar
# simplex(c(3,2), matrix(c(-1, 1, 2, 3, 1, -1), ncol = 2), c(12, 8, 10))
# simplex(c(1,1), matrix(c(4, -1, 2, 1, -5, 2), ncol = 2, byrow = T), c(8, 10, 2))
m <- dim(A)[1]
n <- dim(A)[2]
A <- cbind(A, matrix(rep(0, m*m), ncol = m))
A <- t(cbind(matrix(rep(0, n*(n + m)), ncol = n), t(A)))
B=(n+1):(n+m); #Básicas
N=1:n; #No básicas
if(sum( b < 0 ) > 0) {
flag <- -1
cat('Conjunto factible vacío')
} else  {
flag <- 2
}
fx <- 0
b <- c(rep(0, n), b)
c <- c(c, rep(0, m))
iter <- 0
r <- expand.grid(1:(m+n), 1:(m+n)) %>% arrange(Var1) %>% as.matrix()
while(flag == 2 & iter < 5000) {
iter = iter + 1
cat("\n\n\n", iter, "\n\n")
cat("A\n")
print(A[B, N])
cat("Ax: ", (A %*% b), "\n")
cat("b:", b[B], "\n")
cat("c: ", c[N], "\n")
cat("B: ", B, "\n")
cat("N: ", N, "\n")
cat("fx: ", fx, "\n")
if (sum(c > 0) > 0) {
k <- which(c > 0)[1] # columna pivote
temp <- rep(Inf, m+n)
temp[A[,k] > 0] <- 0
temp <- temp + b/A[,k]
l <- which(temp == min(temp, na.rm = T))[1]
cat("l: ", l, "\n")
cat("k: ", k, "\n")
cat("A[l,k]: ", A[l,k], "\n")
if(sum(l == 0, na.rm = T) | sum(temp, na.rm = T)==0 | sum(temp == Inf, na.rm = T) == m ) {
flag = 0;
print('El problema no es acotado');
} else {
fx <- fx + c[k]*b[l]/A[l,k] #Actualizar func obj
temp1 <- N[N != k] # Conjunto de las no básicas menos k
temp2 <- B[B != l] # Conjunto de las básicas menos l
c[temp1] <- c[temp1] - c[k]*t(A[l,temp1])/A[l,k] #Act cj para todo j No básica menos k
c[l] <- -c[k]/A[l,k] #Actualizar ck
# Para las básicas menos l
b[temp2] <- b[temp2] - A[temp2, k]*b[l]/A[l,k] #Actualizar bi pa todo i Básica menos l
A[temp2, temp1] <- A[temp2, temp1] - (1/A[l,k]) * A[temp2,k] * A[l,temp1] #Actualizar aij pa todo j No básico menos k y todo i Básica menos l
A[temp2, l] = - A[temp2, k] / A[l,k] #Actualizar ail para todo i Básica menos l
b[k] = b[l]/A[l,k] #Actualizar bk
# Para las no básicas menos k
A[k,temp1] = A[l,temp1] / A[l,k] #Actualizar akj
A[k,l] = 1/(A[l,k]) #Actualizar akl
# Actualizar variables básicas
B <- sort(c(temp2, k)) # Nuevo conjunto de variables básicas
N <- sort(c(temp1, l)) # Nuevo conjunto de variables no básicas
c[B] <- 0
b[N] <- 0
temp3 <- expand.grid(N, B) %>% arrange(Var1) %>% as.matrix()
# Estúpidamente ineficiente, pero no hubo tiempo de optimizar esto
idx <- rep(F, nrow(r))
for(i in seq_along(idx)) {
sumas <- rep(0, nrow(temp3))
for(j in seq_along(sumas)){
aaa <- r[i,] == temp3[j,]
sumas[j] <- sum(aaa)
}
idx_loop <- which(sumas == 2)
if(length(idx_loop) > 0) idx[i] <- T
}
q <- r[!idx,]
for(i in 1:nrow(q)) {
A[q[i,2], q[i,1]] <- 0;
} # end for
} # end if
} else {
flag <- 1
print('Solución óptima encontrada')
}
} # end while
x <- b[1:n];
return(list(sol = x, fx = fx, flag = flag))
}
A1 = matrix(c(2, 3, 4, 1, 2, 9), ncol = 2, byrow = T)
c1 = c(21, 31)
b1 = c(25, 32, 54)
simplex(c1, A1, b1)
q()
library(Rcpp)
library(combinat)
library(dplyr)
distancias <- matrix(c(0, 1, 20, 1, 0, 400, 20, 400, 0), nrow = 3)
distancias <- matrix(c(0, 1, 2, 3, 1, 0, 25, 43, 2, 25, 0, 28, 3, 43, 28, 0), nrow = 4)
calcula_distancia <- function(distancias, vec){
suma <- 0
n <- length(vec)
for(k in 1:(n - 1)){
suma <- suma + distancias[vec[k], vec[k + 1]]
}
suma <- suma + distancias[vec[n], vec[1]]
return(suma)
}
cppFunction("
int distC(NumericMatrix distancias, NumericVector vec){
int suma = 0;
int n = vec.size();
for(int k = 0; k < n - 2; k++){
vec[k] = vec[k] - 1;
}
for(int k = 0; k < n - 2; k++){
suma = suma + distancias(vec[k], vec[k + 1]);
}
suma = suma + distancias(vec[n], vec[1]);
return(suma);
}
")
cppFunction("
int distC(NumericMatrix distancias, NumericVector vec){
int suma = 0;
int n = vec.size();
for(int k = 0; k < n - 1; k++){
suma = suma + distancias(vec[k], vec[k + 1]);
}
suma = suma + distancias(vec[n], vec[1]);
return(suma);
}
")
permn(1:4) %>% lapply(., function(vec){
distC(distancias, vec)
})
permn(1:4) %>% lapply(., function(i){
calcula_distancia(distancias, i)
})
cppFunction("
int distC(NumericMatrix distancias, NumericVector vec){
int suma = 0;
int n = vec.size();
for(int k = 0; k < n - 1; k++){
suma = suma + distancias(vec[k] - 1, vec[k + 1] - 1);
}
suma = suma + distancias(vec[n], vec[1]);
return(suma);
}
")
permn(1:4) %>% lapply(., function(vec){
distC(distancias, vec)
})
q(n)
q("n")
q("no")
library(Rcpp)
library(combinat)
library(dplyr)
library(ggplot2)
library(tidyr)
library(TSP)
random_distance_matrix <- function(n) {
as.matrix(dist(matrix(rnorm(n*n), ncol = n)))
}
distancias <- matrix(c(0, 1, 20, 1, 0, 400, 20, 400, 0), nrow = 3)
distancias <- matrix(c(0, 1, 2, 3, 1, 0, 25, 43, 2, 25, 0, 28, 3, 43, 28, 0), nrow = 4)
# calcula_distancia <- function(distancias, vec){
#   suma <- 0
#   n <- length(vec)
#   for(k in 1:(n - 1)){
#     suma <- suma + distancias[vec[k], vec[k + 1]]
#   }
#   suma <- suma + distancias[vec[n], vec[1]]
#   return(suma)
# }
cppFunction('
int distC(NumericMatrix distancias, NumericVector vec){
int suma = 0;
int n = vec.size();
for(int k = 0; k < n - 1; k++){
suma = suma + distancias(vec[k] - 1, vec[k + 1] - 1);
}
suma = suma + distancias(vec[n - 1] - 1, vec[0] - 1);
return(suma);
}
')
# permn(1:4) %>% sapply(., function(vec){
#   distC(distancias, vec)
# }) %>%
#   unlist()
#
# permn(1:4) %>% lapply(., function(vec){
#   calcula_distancia(distancias, vec)
# }) %>%
#   unlist()
calcula_ruta_optima <- function(distancias){
num_ciudades <- nrow(distancias)
rutas_posibles <- permn(1:num_ciudades)
sum_dist <- rutas_posibles %>%
lapply(., function(vec){
calcula_distancia(distancias, vec)
}) %>%
unlist()
distancia_minima <- min(sum_dist)
rutas_optimas <- which(sum_dist == distancia_minima)
return(list(
distancia_minima = distancia_minima,
rutas_optimas = rutas_posibles[rutas_optimas],
rutas_posibles = rutas_posibles,
sum_dist = sum_dist
))
}
tiempos <- c(0.001, 0.003, 0.005, 0.042, 0.276, 2.226, 17.838, 171.937, 2153.732)
data.frame(n = seq_along(tiempos) + 2, tiempo_segundos = tiempos) %>%
mutate(fac = factorial(n)) %>%
gather(key, value, 2:3) %>%
ggplot() + geom_line(aes(n, value)) +
facet_wrap(~key, scales = 'free_y')
data.frame(n = seq_along(tiempos) + 2, tiempo_segundos = tiempos) %>%
mutate(fac = factorial(n)) %>%
gather(key, value, 2:3) %>%
ggplot() + geom_line(aes(n, value)) +
facet_wrap(~key, scales = 'free_y') +scale_x_discrete()
data.frame(n = seq_along(tiempos) + 2, tiempo_segundos = tiempos) %>%
mutate(fac = factorial(n)) %>%
gather(key, value, 2:3) %>%
ggplot() + geom_line(aes(n, value)) +
facet_wrap(~key, scales = 'free_y') +scale_x_discrete(seq_along(tiempos) + 2)
data.frame(n = as.integer(seq_along(tiempos) + 2), tiempo_segundos = tiempos) %>%
mutate(fac = factorial(n)) %>%
gather(key, value, 2:3) %>%
ggplot() + geom_line(aes(n, value)) +
facet_wrap(~key, scales = 'free_y')
data.frame(n = seq_along(tiempos) + 2, tiempo_segundos = tiempos) %>%
mutate(fac = factorial(n)) %>%
gather(key, value, 2:3) %>%
ggplot() + geom_line(aes(n, value)) +
facet_wrap(~key, scales = 'free_y') +
scale_x_continuous(seq_along(tiempos) + 2)
data.frame(n = seq_along(tiempos) + 2, tiempo_segundos = tiempos) %>%
mutate(fac = factorial(n)) %>%
gather(key, value, 2:3) %>%
ggplot() + geom_line(aes(n, value)) +
facet_wrap(~key, scales = 'free_y') +
scale_x_discrete(seq_along(tiempos) + 2)
data.frame(n = seq_along(tiempos) + 2, tiempo_segundos = tiempos) %>%
mutate(fac = factorial(n)) %>%
gather(key, value, 2:3) %>%
ggplot() + geom_line(aes(n, value)) +
facet_wrap(~key, scales = 'free_y') +
scale_x_discrete(labels = function (x) floor(x))
data.frame(n = seq_along(tiempos) + 2, tiempo_segundos = tiempos) %>%
mutate(fac = factorial(n)) %>%
gather(key, value, 2:3) %>%
ggplot() + geom_line(aes(n, value)) +
facet_wrap(~key, scales = 'free_y') +
scale_x_discrete(labels = function (x) floor(x)) + theme_bw()
system.time(solve_TSP(as.TSP(random_distance_matrix(2000))))[3]
iteraciones <- seq(100, 1000, 100)
tiempos <- parallel::mclapply(iteraciones, function(i) {
matriz <- random_distance_matrix(i)
tsp_prob <- as.TSP(matriz)
tiempo <- system.time(solve_TSP(tsp_prob))
#tiempos <- microbenchmark::microbenchmark(solve_TSP(tsp_prob))
#tiempo <- mean(tiempos$time)/10^9
#return(tiempo)
return(tiempo[3])
}, mc.cores = 3) %>%
unlist()
data.frame(n = iteraciones, tiempo_segundos = tiempos) %>%
ggplot(aes(n, tiempo_segundos)) +
geom_point() +
geom_smooth(se = F)
data.frame(n = iteraciones, tiempo_segundos = tiempos) %>%
ggplot() +
geom_line(aes(n, tiempo_segundos))
data.frame(n = iteraciones, tiempo_segundos = tiempos) %>%
ggplot(aes(n, tiempo_segundos)) +
geom_point() +
geom_smooth(se = F)
data.frame(n = iteraciones, tiempo_segundos = tiempos) %>%
ggplot(aes(n, tiempo_segundos)) +
geom_point() +
geom_smooth(se = F) +  theme_bw()
data.frame(n = iteraciones, tiempo_segundos = tiempos^(1/3)) %>%
ggplot(aes(n, tiempo_segundos)) +
geom_point() +
geom_smooth(se = F, method = 'lm') +
theme_bw()
data.frame(n = iteraciones, tiempo_segundos = tiempos^(1/3))
1000/1.75
1/1000/1.75
data.frame(n = iteraciones, tiempo_segundos = tiempos) %>%
ggplot() +
geom_point(aes(n, tiempo_segundos)) +
geom_line(aes(), data = data.frame(n = .$iteraciones, tiempo_est = 0.0005714286*.$iteraciones)) +
geom_smooth(se = F) +
theme_bw()
datos <- data.frame(n = iteraciones, tiempo_segundos = tiempos)
ggplot() +
geom_point(aes(n, tiempo_segundos),
data = datos) +
geom_line(aes(),
data = data.frame(n = datos$iteraciones,
tiempo_est = 0.0005714286*datos$iteraciones)) +
geom_smooth(se = F) +
theme_bw()
ggplot() +
geom_point(aes(n, tiempo_segundos),
data = datos) +
geom_line(aes(n, tiempo_est),
data = data.frame(n = datos$iteraciones,
tiempo_est = 0.0005714286*datos$iteraciones)) +
geom_smooth(se = F) +
theme_bw()
datos
1:max(datos$n)
datos2 <- data.frame(n = 1:max(datos$n)) %>%
mutate(tiempo_est = 0.0005714286*n)
datos2
datos2 <- data.frame(n = 1:max(datos$n)) %>%
mutate(tiempo_est = 0.0005714286^4 * n)
datos2
datos2 <- data.frame(n = 1:max(datos$n)) %>%
mutate(tiempo_est = 0.0005714286^3 * n)
datos2 <- data.frame(n = 1:max(datos$n)) %>%
datos2
datos2 <- data.frame(n = 1:max(datos$n)) %>%
mutate(tiempo_est = 0.0005714286^3 * n^3)
datos2
0.0005714286*1000
datos <- data.frame(n = iteraciones, tiempo_segundos = tiempos)
datos
1000/5.436
1/1000/5.436
datos2 <- data.frame(n = 1:max(datos$n)) %>%
mutate(tiempo_est = 0.0001839588^3 * n^3)
datos2
0.0001839588^3
(0.0001839588*1000)^3
data.frame(n = iteraciones, tiempo_segundos = tiempos^(1/3))
data.frame(n = 1:max(datos$n)) %>%
mutate(tiempo_est = 1.75/1000 * n^3)
data.frame(n = 1:max(datos$n)) %>%
mutate(tiempo_est = (1.75/1000 * n)^3)
datos2 <- data.frame(n = 1:max(datos$n)) %>%
mutate(tiempo_est = (1.75/1000 * n)^3)
ggplot() +
geom_point(aes(n, tiempo_segundos),
data = datos) +
geom_line(aes(n, tiempo_est),
data = datos2) +
geom_smooth(se = F) +
theme_bw()
ggplot() +
geom_point(aes(n, tiempo_segundos),
data = datos) +
geom_line(aes(n, tiempo_est),
data = datos2,
color = 'blue') +
geom_smooth(se = F) +
theme_bw()
data.frame(n = iteraciones, tiempo_segundos = tiempos) %>%
ggplot(aes(n, tiempo_segundos)) +
geom_point() +
#geom_smooth(se = F) +
theme_bw()
(1.75/1000)^3
?solve_TSP
current_temperature = function(iter, s_curve_amplitude, s_curve_center, s_curve_width) {
s_curve_amplitude * s_curve(iter, s_curve_center, s_curve_width)
}
s_curve_amplitude
s_curve_amplitude = 4000
s_curve_center = 0
s_curve_width = 3000
s_curve_width = 3000s_curve_width
current_temperature(1, s_curve_amplitude, s_curve_center, s_curve_width)
s_curve = function(x, center, width) {
1 / (1 + exp((x - center) / width))
}
current_temperature(1, s_curve_amplitude, s_curve_center, s_curve_width)
current_temperature(30, s_curve_amplitude, s_curve_center, s_curve_width)
current_temperature(0, s_curve_amplitude, s_curve_center, s_curve_width)
current_temperature(0:25000, s_curve_amplitude, s_curve_center, s_curve_width)
current_temperature(0:25000, s_curve_amplitude, s_curve_center, s_curve_width) %>% tail()
library(dplyr)
current_temperature(0:25000, s_curve_amplitude, s_curve_center, s_curve_width) %>% tail()
data.frame(iter = 0:25000) %>% mutate(temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width))
library(ggplot2)
data.frame(iter = 0:25000) %>% mutate(temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)) %>% ggplot() + geom_line(aes(iter, temp)) + theme_bw()
setwd("~/Dropbox/Mario/Escuela/ITAM/MCC/Analisis_de_algoritmos/Tareas/Tarea_05")
library(Rcpp)
sourceCpp("matrixChainOrder.cpp")
orden_matrices <- function(p){
res <- matrixChainOrder(c(30, 35, 15, 5, 10, 20, 25))
m <- res$m
s <- res$s
return(list(m = m[2:nrow(m), 2:ncol(m)],
s = s[2:nrow(s), 2:ncol(s)]
))
}
res <- orden_matrices(c(30, 35, 15, 5, 10, 20, 25))
PrintAnswer <- function(s, i, j) {
if(i == j) {
cat("A", i, sep = "")
} else{
cat("(")
PrintAnswer(s, i, s[i, j])
PrintAnswer(s, s[i, j] + 1, j)
cat(")")
}
}
PrintAnswer(res$s, 1, ncol(res$s))
orden_matrices <- function(p){
res <- matrixChainOrder(c(30, 35, 15, 5, 10, 20, 25))
m <- res$m
s <- res$s
cat("Ordenamiento: ")
PrintAnswer(s, 1, ncol(s))
return(list(m = m[2:nrow(m), 2:ncol(m)],
s = s[2:nrow(s), 2:ncol(s)]
))
}
res <- orden_matrices(c(30, 35, 15, 5, 10, 20, 25))
PrintAnswer(res$s, 1, ncol(res$s))
orden_matrices <- function(p){
res <- matrixChainOrder(c(30, 35, 15, 5, 10, 20, 25))
m <- res$m
s <- res$s
m = m[2:nrow(m), 2:ncol(m)]
s = s[2:nrow(s), 2:ncol(s)]
cat("Ordenamiento: ")
PrintAnswer(s, 1, ncol(s))
return(list(m = m,
s = s
))
}
res <- orden_matrices(c(30, 35, 15, 5, 10, 20, 25))
orden_matrices <- function(p){
res <- matrixChainOrder(c(30, 35, 15, 5, 10, 20, 25))
m <- res$m
s <- res$s
m = m[2:nrow(m), 2:ncol(m)]
s = s[2:nrow(s), 2:ncol(s)]
cat("Ordenamiento óptimo: ")
PrintAnswer(s, 1, ncol(s))
return(list(m = m,
s = s
))
}
res <- orden_matrices(c(30, 35, 15, 5, 10, 20, 25))
res <- orden_matrices(c(100, 4, 50, 20, 100))
res
library(Rcpp)
sourceCpp("matrixChainOrder.cpp")
orden_matrices <- function(p){
res <- matrixChainOrder(c(30, 35, 15, 5, 10, 20, 25))
m <- res$m
s <- res$s
m = m[2:nrow(m), 2:ncol(m)]
s = s[2:nrow(s), 2:ncol(s)]
cat("Ordenamiento óptimo: ")
PrintAnswer(s, 1, ncol(s))
return(list(m = m,
s = s
))
}
PrintAnswer <- function(s, i, j) {
if(i == j) {
cat("A", i, sep = "")
} else{
cat("(")
PrintAnswer(s, i, s[i, j])
PrintAnswer(s, s[i, j] + 1, j)
cat(")")
}
}
res <- orden_matrices(c(100, 4, 50, 20, 100))
res$m
orden_matrices <- function(p){
res <- matrixChainOrder(p)
m <- res$m
s <- res$s
m = m[2:nrow(m), 2:ncol(m)]
s = s[2:nrow(s), 2:ncol(s)]
cat("Ordenamiento óptimo: ")
PrintAnswer(s, 1, ncol(s))
return(list(m = m,
s = s
))
}
res <- orden_matrices(c(100, 4, 50, 20, 100))
m
res$s
res$m
res <- orden_matrices(c(100, 4, 50, 20, 100))
